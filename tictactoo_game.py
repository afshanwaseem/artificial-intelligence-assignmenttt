# -*- coding: utf-8 -*-
"""TICTACTOO GAME

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hveIVcm8v452387-_5htFATUx3JnGJxk
"""

import math

X = "X"
O = "O"
EMPTY = None

def initial_state():
    """ Returns starting state of the board. """
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]

def player(board):
    """ Returns player who has the next turn on a board. """
    x_count = sum(row.count(X) for row in board)
    o_count = sum(row.count(O) for row in board)
    return X if x_count <= o_count else O

def actions(board):
    """ Returns set of all possible actions (i, j) available on the board. """
    return {(i, j) for i in range(3) for j in range(3) if board[i][j] == EMPTY}

def result(board, action):
    """ Returns the board that results from making move (i, j) on the board. """
    i, j = action
    if board[i][j] is not EMPTY:
        raise ValueError("Invalid action")

    new_board = [row[:] for row in board]
    new_board[i][j] = player(board)
    return new_board

def winner(board):
    """ Returns the winner of the game, if there is one. """
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] and board[i][0] is not EMPTY:
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] and board[0][i] is not EMPTY:
            return board[0][i]

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] is not EMPTY:
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] is not EMPTY:
        return board[0][2]

    return None

def terminal(board):
    """ Returns True if game is over, False otherwise. """
    return winner(board) is not None or all(cell is not EMPTY for row in board for cell in row)

def utility(board):
    """ Returns 1 if X wins, -1 if O wins, 0 for tie. """
    win = winner(board)
    return 1 if win == X else -1 if win == O else 0

def minimax(board):
    """ Returns the optimal action for the current player on the board. """
    if terminal(board):
        return None

    def max_value(board):
        if terminal(board):
            return utility(board), None
        v, best_move = -math.inf, None
        for action in actions(board):
            min_val, _ = min_value(result(board, action))
            if min_val > v:
                v, best_move = min_val, action
        return v, best_move

    def min_value(board):
        if terminal(board):
            return utility(board), None
        v, best_move = math.inf, None
        for action in actions(board):
            max_val, _ = max_value(result(board, action))
            if max_val < v:
                v, best_move = max_val, action
        return v, best_move

    current_player = player(board)
    return max_value(board)[1] if current_player == X else min_value(board)[1]

def print_board(board):
    """ Prints the Tic-Tac-Toe board in a readable format. """
    for row in board:
        print(" | ".join([cell if cell is not None else " " for cell in row]))
        print("-" * 9)

def play_game():
    """ Runs a text-based Tic-Tac-Toe game in Colab. """
    board = initial_state()
    human = input("Do you want to play as X or O? ").upper()
    while human not in [X, O]:
        human = input("Invalid choice. Choose X or O: ").upper()

    ai = O if human == X else X

    while not terminal(board):
        print_board(board)
        if player(board) == human:
            print("Your turn! Enter row and column (0, 1, 2) separated by space:")
            while True:
                try:
                    i, j = map(int, input().split())
                    if (i, j) in actions(board):
                        board = result(board, (i, j))
                        break
                    else:
                        print("Invalid move. Try again.")
                except:
                    print("Invalid input. Enter two numbers (0, 1, 2).")
        else:
            print("AI is thinking...")
            move = minimax(board)
            board = result(board, move)

    print_board(board)
    if winner(board):
        print(f"Game Over! {winner(board)} wins!")
    else:
        print("It's a tie!")
play_game()